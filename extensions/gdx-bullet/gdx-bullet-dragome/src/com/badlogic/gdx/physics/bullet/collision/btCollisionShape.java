/*-------------------------------------------------------
 * This file was generated by XpeCodeGen
 * Version 1.0.0
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.badlogic.gdx.physics.bullet.collision;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.physics.bullet.BulletBase;

/** @author xpenatan */
public class btCollisionShape extends BulletBase {

    /**
	 * 
	 * @param value A size 4 array for index 0,1,2 (center), and 4 (radius) 
	 */
    public void getBoundingSphere(float[] value) {
		com.dragome.commons.javascript.ScriptHelper.put("value",value,this);
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.put("jsObj",this.jsObj,this);
		com.dragome.commons.javascript.ScriptHelper.put("center",com.badlogic.gdx.physics.bullet.linearmath.btVector3.btVector3_1.jsObj,this);
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("var radius=0;jsObj.getBoundingSphere(center,radius);value[0]=center.x();value[1]=center.y();value[2]=center.z();value[3]=radius;",this);
    }

    public float getAngularMotionDisc() {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.put("jsObj",this.jsObj,this);
		return com.dragome.commons.javascript.ScriptHelper.evalFloat("jsObj.getAngularMotionDisc();",this);
    }

    public boolean isPolyhedral() {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.put("jsObj",this.jsObj,this);
		return com.dragome.commons.javascript.ScriptHelper.evalBoolean("jsObj.isPolyhedral();",this);
    }

    public boolean isConvex2d() {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.put("jsObj",this.jsObj,this);
		return com.dragome.commons.javascript.ScriptHelper.evalBoolean("jsObj.isConvex2d();",this);
    }

    public boolean isConvex() {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.put("jsObj",this.jsObj,this);
		return com.dragome.commons.javascript.ScriptHelper.evalBoolean("jsObj.isConvex();",this);
    }

    public boolean isNonMoving() {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.put("jsObj",this.jsObj,this);
		return com.dragome.commons.javascript.ScriptHelper.evalBoolean("jsObj.isNonMoving();",this);
    }

    public boolean isConcave() {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.put("jsObj",this.jsObj,this);
		return com.dragome.commons.javascript.ScriptHelper.evalBoolean("jsObj.isConcave();",this);
    }

    public boolean isCompound() {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.put("jsObj",this.jsObj,this);
		return com.dragome.commons.javascript.ScriptHelper.evalBoolean("jsObj.isCompound();",this);
    }

    public boolean isSoftBody() {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.put("jsObj",this.jsObj,this);
		return com.dragome.commons.javascript.ScriptHelper.evalBoolean("jsObj.isSoftBody();",this);
    }

    public boolean isInfinite() {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.put("jsObj",this.jsObj,this);
		return com.dragome.commons.javascript.ScriptHelper.evalBoolean("jsObj.isInfinite();",this);
    }

    public void setLocalScaling(Vector3 scaling) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.put("jsObj",this.jsObj,this);
		com.dragome.commons.javascript.ScriptHelper.put("x",scaling.x,this);
		com.dragome.commons.javascript.ScriptHelper.put("y",scaling.y,this);
		com.dragome.commons.javascript.ScriptHelper.put("z",scaling.z,this);
		com.dragome.commons.javascript.ScriptHelper.put("vec",com.badlogic.gdx.physics.bullet.linearmath.btVector3.btVector3_1.jsObj,this);
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("vec.setValue(x,y,z);jsObj.setLocalScaling(vec);",this);
    }

    public void getLocalScaling(Vector3 out) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.put("jsObj",this.jsObj,this);
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("var vec=jsObj.getLocalScaling();",this);
		out.x = com.dragome.commons.javascript.ScriptHelper.evalFloat("vec.x();",this);
		out.y = com.dragome.commons.javascript.ScriptHelper.evalFloat("vec.y();",this);
		out.z = com.dragome.commons.javascript.ScriptHelper.evalFloat("vec.z();",this);
    }

    public void calculateLocalInertia(float mass, Vector3 inertia) {
		com.dragome.commons.javascript.ScriptHelper.put("mass",mass,this);
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.put("jsObj",this.jsObj,this);
		com.dragome.commons.javascript.ScriptHelper.put("vec3",com.badlogic.gdx.physics.bullet.linearmath.btVector3.btVector3_1.jsObj,this);
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("jsObj.calculateLocalInertia(mass,vec3);",this);
		inertia.x = com.dragome.commons.javascript.ScriptHelper.evalFloat("vec3.x();",this);
		inertia.y = com.dragome.commons.javascript.ScriptHelper.evalFloat("vec3.y();",this);
		inertia.z = com.dragome.commons.javascript.ScriptHelper.evalFloat("vec3.z();",this);
    }

    public int getShapeType() {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.put("jsObj",this.jsObj,this);
		return com.dragome.commons.javascript.ScriptHelper.evalInt("jsObj.getShapeType();",this);
    }

    public void getAnisotropicRollingFrictionDirection(Vector3 out) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.put("jsObj",this.jsObj,this);
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("var vec=jsObj.getAnisotropicRollingFrictionDirection();",this);
		out.x = com.dragome.commons.javascript.ScriptHelper.evalFloat("vec.x();",this);
		out.y = com.dragome.commons.javascript.ScriptHelper.evalFloat("vec.y();",this);
		out.z = com.dragome.commons.javascript.ScriptHelper.evalFloat("vec.z();",this);
    }

    public float getMargin() {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.put("jsObj",this.jsObj,this);
		return com.dragome.commons.javascript.ScriptHelper.evalFloat("jsObj.getMargin();",this);
    }

    public int getUserIndex() {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.put("jsObj",this.jsObj,this);
		return com.dragome.commons.javascript.ScriptHelper.evalInt("jsObj.getUserIndex();",this);
    }

    public void setUserIndex(int index) {
		com.dragome.commons.javascript.ScriptHelper.put("index",index,this);
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.put("jsObj",this.jsObj,this);
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("jsObj.setUserIndex(index);",this);
    }
}
